include "pipelines/common.glsl"

vertex_shader [[
	
	layout (location = 0) out vec2 v_uv;
	
	void main()
	{
		gl_Position = fullscreenQuad(gl_VertexID, v_uv);
	}
]]


fragment_shader [[
	layout (location = 0) in vec2 v_uv;
	layout (location = 0) out vec4 o_color;
	layout (binding=0) uniform sampler2D u_depth_buffer;
	layout (binding=1) uniform samplerCube u_ground_texture;

	vec3 air_color = vec3(0.18867780436772762, 0.4978442963618773, 0.6616065586417131);
	const float TO_METERS = 1;//6378e3 / 95.0; // convert engine units to meters
	
	float rtop = 6478e3;
	float rbot = 6378e3;
	const int STEP_COUNT = 50;

	const vec3 sunlight = vec3(7);
	const vec3 scatter_rayleigh = vec3(5.8e-6, 1.35e-5, 3.31e-5); // m-1
	// extinction == absorption + outscatter
	const vec3 extinction_rayleigh = scatter_rayleigh;
	const vec3 scatter_mie = vec3(5e-5);
	const vec3 extinction_mie = 1.11 * scatter_mie;
	const vec3 cam_origin = vec3(0, 0, 0);
	
	// mie - Schlick appoximation phase function of Henyey-Greenstein
	float miePhase(float g, float cos_theta)
	{
		float tmp = 1 + g * cos_theta;
		return (1 - g * g) / (4 * M_PI + tmp * tmp);
	}

	float rayleighPhase(float cos_theta)
	{
		return 3/(16.0 * M_PI) * (1 + cos_theta * cos_theta);
	}

	float phase(float alpha, float g)
	{
		float a = 3.0*(1.0-g*g);
		float b = 2.0*(2.0+g*g);
		float c = 1.0+alpha*alpha;
		float d = pow(1.0+g*g-2.0*g*alpha, 1.5);
		return (a/b)*(c/d);
	}


	float atmospheric_depth(vec3 position, vec3 dir)
	{
		float a = dot(dir, dir);
		float b = 2.0*dot(dir, position);
		float c = dot(position, position)-1.0;
		float det = b*b-4.0*a*c;
		float detSqrt = sqrt(det);
		float q = (-b - detSqrt)/2.0;
		float t1 = c/q;
		return t1;
	}


	float horizon_extinction(vec3 position, vec3 dir, float radius)
	{
		float u = dot(dir, -position);
		if(u<0.0){
			return 1.0;
		}
		vec3 near = position + u*dir;
		if(length(near) < radius){
			return 0.0;
		}
		else{
			vec3 v2 = normalize(near)*radius - position;
			float diff = acos(dot(normalize(v2), dir));
			return smoothstep(0.0, 1.0, pow(diff*2.0, 3.0));
		}
	}

	vec3 absorb(float dist, vec3 color, float factor)
	{
		return color-color*pow(air_color.rgb, vec3(factor/dist));
	}

	vec3 getWorldNormal(vec2 frag_coord)
	{
		float z = 1;
		#ifdef _ORIGIN_BOTTOM_LEFT
			vec4 posProj = vec4(frag_coord * 2 - 1, z, 1.0);
		#else
			vec4 posProj = vec4(vec2(frag_coord.x, 1-frag_coord.y) * 2 - 1, z, 1.0);
		#endif
		vec4 wpos = u_camera_inv_view_projection * posProj;
		wpos /= wpos.w;
		vec3 view = (u_camera_inv_view * vec4(0.0, 0.0, 0.0, 1.0)).xyz - wpos.xyz;

		return -normalize(view);
	}
	
	float getFogFactorSky(float cam_height, vec3 eye_dir, float fog_density, float fog_bottom, float fog_height) 
	{
		if(eye_dir.y == 0) return 1.0;
		float to_top = max(0, (fog_bottom + fog_height) - cam_height);

		float avg_y = (fog_bottom + fog_height + cam_height) * 0.5;
		float avg_density = fog_density * clamp(1 - (avg_y - fog_bottom) / fog_height, 0, 1);
		float res = exp(-pow(avg_density * to_top / eye_dir.y, 2));
		res =  1 - clamp(res - (1-min(0.2, eye_dir.y)*5), 0, 1);
		return res;
	}

	vec3 transmittance(vec3 extinction, float len) {
		return exp(-len * extinction);
	}
	
	vec2 ray_sphere_intersect(vec3 r0, vec3 rd, vec3 s0, float sr) {
		vec3 s0_r0 = s0 - r0;
		float tc = dot(s0_r0, rd);
		float d2 = dot(s0_r0, s0_r0) - tc * tc;
		float sr2 = sr * sr;
		if (d2 > sr2) return vec2(-1);
		float td2 = sr2 - d2;
		float td = sqrt(td2);
		return vec2(tc - td, tc + td);
	}

	vec3 getTopAtmoLightDir(vec3 p) {
		vec2 t = ray_sphere_intersect(p, u_light_direction.xyz, vec3(0), rtop);
		return p + t.y * u_light_direction.xyz;
	}


	float computeDensity(vec3 a, vec3 b, float distribution) {
		//float ha = length(a);
		//float hb = length(b);
		//float densa = exp(min(0, (rbot - ha) / distribution));
		//float densb = exp(min(0, (rbot - hb) / distribution));
		float l = length(a - b);
		int step_count = int(clamp(l / 1000, 1.0, 7.0));
		float dens = 0;
		vec3 step = (b - a) / step_count;
		float step_len = l / step_count;
		vec3 p = a;
		for (int i = 0; i < step_count; ++i) {
			float h = length(p);
			float tmp = exp(min(0, (rbot - h) / distribution));
			dens += step_len * tmp;
			p += step;
		}
		return dens;
	}
	
	vec3 getViewPosition(sampler2D depth_buffer, mat4 inv_view_proj, vec2 tex_coord, out float z)
	{
		z = texture(depth_buffer, tex_coord).r;
		#ifdef _ORIGIN_BOTTOM_LEFT
			vec4 pos_proj = vec4(vec2(tex_coord.x, tex_coord.y) * 2 - 1, z, 1.0);
		#else 
			vec4 pos_proj = vec4(vec2(tex_coord.x, 1-tex_coord.y) * 2 - 1, z, 1.0);
		#endif
		vec4 view_pos = inv_view_proj * pos_proj;
		return view_pos.xyz / view_pos.w;
	}

	void main()
	{
		//float ndepth;
		//vec3 view_pos = getViewPosition(u_depth_buffer, u_camera_inv_projection, v_uv, ndepth) * TO_METERS;

		vec3 eyedir = getWorldNormal(v_uv);
		vec3 lightdir = u_light_direction.xyz;

		vec3 campos = cam_origin + u_camera_world_pos.xyz * TO_METERS;
		vec2 atmo_isect = ray_sphere_intersect(campos, eyedir, vec3(0), rtop);
		vec2 ground_isect = ray_sphere_intersect(campos, eyedir, vec3(0), rbot);
		if (ground_isect.x > 0) {
			atmo_isect.y = min(atmo_isect.y, ground_isect.x);
		}
		const float cos_theta = dot(eyedir, lightdir);
		float spot = smoothstep(0.0, 1000, phase(cos_theta, 0.9995)) * 200;
		if (atmo_isect.y < 0) {
			o_color = vec4(spot, spot, spot, spot);
			return;
		}
		//atmo_isect.y = ndepth <= 0 ? atmo_isect.y : min(length(view_pos), atmo_isect.y);
		atmo_isect.x = max(0, atmo_isect.x);

		float mu = eyedir.y;
		vec3 rayleigh = vec3(0);
		vec3 mie = vec3(0);
		vec3 p = campos + atmo_isect.x * eyedir;
		const float step_len = (atmo_isect.y - atmo_isect.x) / STEP_COUNT;
		const vec3 step = step_len * eyedir;

		float alpha = 0;
		for (int i = 0; i < STEP_COUNT; ++i) 
		{
			const float cos_theta = dot(normalize(step), lightdir);

			vec3 rayleigh_inscatter = (sunlight * rayleighPhase(cos_theta) * computeDensity(p, p + step, 8000) * scatter_rayleigh)
				* transmittance(extinction_rayleigh, computeDensity(p, getTopAtmoLightDir(p), 8000))
				* transmittance(extinction_rayleigh, computeDensity(campos, p, 8000))
				;
			
			vec3 mie_inscatter = (sunlight * miePhase(0.75, cos_theta) * computeDensity(p, p + step, 1200) * scatter_mie)
				* transmittance(extinction_mie, computeDensity(p, getTopAtmoLightDir(p), 1200))
				* transmittance(extinction_mie, computeDensity(campos, p, 1200))
				;

			rayleigh += rayleigh_inscatter;
			mie += mie_inscatter;
			p += step; 
		}
		
		vec3 ground_col = vec3(0);
		if (ground_isect.y > 0) {
			alpha = 1;
			vec3 ground_pos = campos + ground_isect.x * eyedir;
			vec3 ground_N = normalize(ground_pos);
			ground_col = texture(u_ground_texture, ground_N).rgb;
			ground_col += u_light_color.rgb * pow(max(0, dot(ground_N, normalize(lightdir-eyedir))), 64) * 0.4;
			ground_col *= max(0, dot(ground_N, lightdir));
			spot = 0;
		}


		o_color.rgb = ground_col
			+ rayleigh
			//+ mie
			+ spot
			;
		o_color.w = 1;
	}
]]